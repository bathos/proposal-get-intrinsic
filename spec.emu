<!doctype html>
<meta charset="utf8" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css" />
<pre class="metadata">
title: Get Intrinsic
stage: 1
contributors: Jordan Harband
</pre>

<emu-clause number="6" id="sec-ecmascript-data-types-and-values" aoid="Type">
  <h1>ECMAScript Data Types and Values</h1>

  <emu-clause id="sec-ecmascript-language-types" number="1">
    <h1>ECMAScript Language Types</h1>

    <emu-clause id="sec-object-type" number="7">
      <h1>The <dfn variants="is an Object,is not an Object">Object Type</dfn></h1>

      <emu-clause id="sec-well-known-intrinsic-objects" number="4">
        <h1>Well-Known Intrinsic Objects</h1>
        <p>Well-known intrinsics are built-in objects that are explicitly referenced by the algorithms of this specification and which usually have realm-specific identities. Unless otherwise specified each intrinsic object actually corresponds to a set of similar objects, one per realm.</p>
        <p>Within this specification a reference such as %name% means the intrinsic object, associated with the current realm, corresponding to the name. A reference such as %name.a.b% means, as if the *"b"* property of the value of the *"a"* property of the intrinsic object %name% was accessed prior to any ECMAScript code being evaluated. Determination of the current realm and its intrinsics is described in <emu-xref href="#sec-execution-contexts"></emu-xref>. The well-known intrinsics are listed in <emu-xref href="#table-well-known-intrinsic-objects"></emu-xref>.</p>
        <emu-table id="table-well-known-intrinsic-objects" caption="Well-Known Intrinsic Objects" oldids="table-7">
          <table>
            <tr>
              <th>
                Intrinsic Name
              </th>
              <th>
                Global Name
              </th>
              <th>
                ECMAScript Language Association
              </th>
              <th>
                <ins>Directly Accessible to ECMAScript code</ins>
              </th>
            </tr>
            <tr>
              <td>
                %AggregateError%
              </td>
              <td>
                `AggregateError`
              </td>
              <td>
                The `AggregateError` constructor (<emu-xref href="#sec-aggregate-error-constructor"></emu-xref>)
              </td>
              <td />
            </tr>
            <tr>
              <td>
                %ForInIteratorPrototype%
              </td>
              <td>
              </td>
              <td>
                The prototype of For-In iterator objects (<emu-xref href="#sec-for-in-iterator-objects"></emu-xref>)
              </td>
              <td align="center">
                <ins>No</ins>
              </td>
            </tr>
          </table>
        </emu-table>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-abstract-operations" number="7">
  <h1>Abstract Operations</h1>

  <emu-clause id="sec-miscellaneous" number="5">
    <h1>Miscellaneous</h1>

    <emu-clause id="sec-split-intrinsic-path" type="abstract operation">
      <h1>
        SplitIntrinsicPath(
          _path_: a String
        ): either a normal completion containing a List of either Strings or Symbols, or a throw completion
      </h1>
      <dl class="header">
      </dl>
      <p>`SplitIntrinsicPath` takes a path like `a.b.c` or `a.b[Symbol.c]`, and splits it into a List containing each part.</p>
      <emu-note type="editor">This algorithm may be more simply expressed as a parsing grammar, but for now I went with this approach.</emu-note>
      <emu-alg>
        1. Let _parts_ be a new empty List.
        1. Let _index_ be 0.
        1. Let _len_ be the length of _path_.
        1. While _index_ &lt; _len_,
          1. Let _dotOrBracket_ be the index into _path_, starting at _index_, that contains either *"."* or *"["*.
          1. If _dotOrBracket_ = _index_, throw a *TypeError* exception.
          1. If ! Get(_path_, _dotOrBracket_) is *"."*, then
            1. Let _part_ be the substring of _path_ from _index_ to _dotOrBracket_.
            1. Let _index_ be _dotOrBracket_ + 1.
            1. If _part_ is *""* or *"__proto__"*, throw a *TypeError* exception.
            1. If _part_ is *"constructor"* or *"name"* or *"length"*, and _index_ &gte; _len_, throw a *TypeError* exception.
            1. Append _part_ to _parts_.
          1. Else,
            1. Let _closeBracket_ be the index into _path_, starting at _dotOrBracket_, that contains *"]"*.
            1. If _closeBracket_ is -1, throw a *TypeError* exception.
            1. Let _part_ be the substring of _path_ from _dotOrBracket_ + 1 to _closeBracket_.
            1. If _part_ does not match the [[Description]] column of any row in <emu-xref href="#table-well-known-symbols"></emu-xref>, throw a *TypeError* exception.
            1. Let _symbol_ be the value that matches the [[Description]] column in <emu-xref href="#table-well-known-symbols"></emu-xref>.
            1. Let _index_ be _closeBracket_ + 1.
            1. If _index_ &lt; _len_, throw a *TypeError* exception.
            1. Append _symbol_ to _parts_.
        1. Return _parts_.
      </emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>
<emu-clause id="sec-value-properties-of-the-global-object" number="19">
  <h1>Value Properties of the Global Object</h1>

  <emu-clause id="sec-function-properties-of-the-global-object" number="3">
    <h1>Function Properties of the Global Object</h1>

    <emu-clause id="sec-getintrinsic" number="2">
      <h1>getIntrinsic ( _name_ )</h1>
      <ins class="block">
      <p>The `getIntrinsic` function is the <dfn>%getIntrinsic%</dfn> intrinsic object. When the `getIntrinsic` function is called with one argument _name_, the following steps are taken:</p>
      <emu-alg>
        1. If Type(_name_) is not String, throw a *TypeError* exception.
        1. Let _kind_ be ~data~.
        1. If _name_ starts with "get ",
          1. Let _kind_ be ~getter~.
        1. Else if _name_ starts with "set ",
          1. Let _kind_ be ~setter~.
        1. If _kind_ is not ~data~, then
          1. Let _name_ be the substring of _name_ from 4.
        1. Let _parts_ be ? SplitIntrinsicPath(_name_).
        1. If the string-concatenation of *"%"*, _name_, and *"%"* would match an intrinsic according to the notation described in <a href="https://tc39.es/ecma262/#sec-well-known-intrinsic-objects">Well-Known Intrinsic Objects</a>, and that intrinsic is listed as being "Directly Accessible to ECMAScript Code", then
          1. If _kind_ is ~data~, and the intrinsic describes a data property,
            1. Return that intrinsic.
          1. Else if _kind_ is ~getter~, and the intrinsic describes an accessor property,
            1. Return that accessor property‚Äôs [[Get]] function.
          1. Else if _kind_ is ~setter~, and the intrinsic describes an accessor property,
            1. Return that accessor property‚Äôs [[Set]] function.
        1. Throw a *TypeError* exception.
      </emu-alg>
      <emu-note>
        When the _name_ string succeeds in producing an intrinsic, the _name_ string surrounded by *"%"* matches the intrinsic notation described in the specification in <a href="https://tc39.es/ecma262/#sec-well-known-intrinsic-objects">Well-Known Intrinsic Objects</a>.
      </emu-note>
      </ins>
    </emu-clause>

    <emu-clause id="sec-isfinite-number">
      <h1>isFinite ( _number_ )</h1>
      <p>The `isFinite` function is the <dfn>%isFinite%</dfn> intrinsic object. When the `isFinite` function is called with one argument _number_, the following steps are taken:</p>
      <emu-alg>
        1. Let _num_ be ? ToNumber(_number_).
        1. If _num_ is *NaN*, *+&infin;*<sub>ùîΩ</sub>, or *-&infin;*<sub>ùîΩ</sub>, return *false*.
        1. Otherwise, return *true*.
      </emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>

